version: '3.8'

services:
  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: pco-arrivals-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    networks:
      - pco-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL for production database (optional, replace SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: pco-arrivals-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: pco_arrivals
      POSTGRES_USER: ${POSTGRES_USER:-pco_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgresql
    networks:
      - pco-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pco_user}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend API Service
  pco-arrivals-backend:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: pco-arrivals-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - DATABASE_URL=${DATABASE_URL:-file:./data/pco_billboard.db?cache=shared&mode=rwc&_journal_mode=WAL}
      - POSTGRES_URL=postgres://${POSTGRES_USER:-pco_user}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/pco_arrivals?sslmode=disable
    env_file:
      - .env.production
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backups:/app/backups
      - ./ssl:/app/ssl:ro
    networks:
      - pco-network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Frontend Service
  pco-arrivals-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: pco-arrivals-frontend
    restart: unless-stopped
    ports:
      - "5173:80"
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-https://your-domain.com}
      - VITE_WS_BASE_URL=${VITE_WS_BASE_URL:-wss://your-domain.com}
    depends_on:
      - pco-arrivals-backend
    networks:
      - pco-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: pco-arrivals-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - pco-arrivals-backend
      - pco-arrivals-frontend
    networks:
      - pco-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: pco-arrivals-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pco-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: pco-arrivals-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - pco-network

  # Backup service
  backup:
    image: alpine:latest
    container_name: pco-arrivals-backup
    restart: "no"
    volumes:
      - ./data:/app/data:ro
      - ./backups:/app/backups
      - ./scripts/backup.sh:/app/backup.sh:ro
    environment:
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    command: ["/bin/sh", "/app/backup.sh"]
    networks:
      - pco-network
    profiles:
      - backup

networks:
  pco-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  data:
  logs:
  backups: 